Timer unit: 1e-09 s

Total time: 19809.2 s
File: /home/admin1/hse/blockchain-benchmarks/ml/main.py
Function: fit at line 266

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   266                                               def fit(sample_params, optimizer, conf, scores_snr_path="scores_snr.txt", optimals_path="optimals.txt", scores_path="scores.txt") -> tuple[pd.DataFrame, pd.Series]:
   267                                           
   268                                                   # cleanup
   269         1      20464.0  20464.0      0.0          if os.path.exists(scores_path):
   270         1      81436.0  81436.0      0.0              os.remove(scores_path)
   271         1       5098.0   5098.0      0.0          if os.path.exists(optimals_path):
   272         1      24375.0  24375.0      0.0              os.remove(optimals_path)
   273         1       4819.0   4819.0      0.0          if os.path.exists(scores_snr_path):
   274         1      23397.0  23397.0      0.0              os.remove(scores_snr_path)
   275                                           
   276         1       1886.0   1886.0      0.0          scores = []
   277         1       1467.0   1467.0      0.0          optimals = []
   278         1       1886.0   1886.0      0.0          scores_snr = []
   279                                           
   280         1    3400900.0    3e+06      0.0          df = pd.DataFrame(columns=[param.name.split('|')[0] for param in sample_params])
   281         1     305909.0 305909.0      0.0          y = pd.Series(name="Throughput (TPS)")
   282                                                   # TODO: take failed transactions into account
   283                                           
   284         6      11874.0   1979.0      0.0          for i in range(NUM_EPOCHS):
   285         5   58907176.0    1e+07      0.0              next_point = optimizer.ask()
   286                                           
   287         5    7841842.0    2e+06      0.0              df.loc[len(df)] = next_point
   288                                           
   289         5      10406.0   2081.2      0.0              if next_point is None:
   290                                                           print("No more points to evaluate.")
   291                                                           break
   292                                           
   293         5    3903146.0 780629.2      0.0              fill_config(conf, next_point, sample_params)
   294         5    2206603.0 441320.6      0.0              fill_config(conf_core, next_point, sample_params) # should throw when given params for other configs
   295                                           
   296        10     909138.0  90913.8      0.0              with open(CONFIG_PATH, 'w') as f:
   297         5   85254418.0    2e+07      0.0                  yaml.dump(conf, f)
   298                                           
   299        10     864929.0  86492.9      0.0              with open('core.yaml', 'w') as f:
   300         5  154879068.0    3e+07      0.0                  yaml.dump(conf_core, f)
   301                                           
   302         5     404597.0  80919.4      0.0              print(f"Next point to evaluate: {next_point}")
   303         5       9009.0   1801.8      0.0              optimals.append(next_point)
   304                                           
   305         5       7125.0   1425.0      0.0              snr_scores = []
   306        55     125573.0   2283.1      0.0              for _ in range(NUM_SNR):
   307        50        2e+13    4e+11    100.0                  value = objective_function()
   308        50     199957.0   3999.1      0.0                  snr_scores.append(value)
   309        50      90237.0   1804.7      0.0                  pass
   310                                           
   311         5      11594.0   2318.8      0.0              scores_snr.append(snr_scores)
   312         5      13479.0   2695.8      0.0              scores.append(snr_scores[0])
   313         5    4558897.0 911779.4      0.0              y.loc[len(y)] = snr_scores[0]
   314         5     152955.0  30591.0      0.0              print(f"Score: {value}\n")
   315         5    1402995.0 280599.0      0.0              optimizer.tell(next_point, -value)
   316                                           
   317        10     720913.0  72091.3      0.0              with open(scores_path, "a") as f:
   318         5      28146.0   5629.2      0.0                  print(scores[-1], file=f)
   319                                                       
   320        10     178586.0  17858.6      0.0              with open(optimals_path, "a") as f:
   321         5     219793.0  43958.6      0.0                  print(optimals[-1], file=f)
   322                                           
   323        10     160429.0  16042.9      0.0              with open(scores_snr_path, "a") as f:
   324         5      46934.0   9386.8      0.0                  print(scores_snr[-1], file=f)
   325                                           
   326         1       1885.0   1885.0      0.0          return df, y

